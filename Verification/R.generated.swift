//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 7 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Rubik-Bold.ttf`.
    static let rubikBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Bold", pathExtension: "ttf")
    /// Resource file `Rubik-Medium.ttf`.
    static let rubikMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Medium", pathExtension: "ttf")
    /// Resource file `Rubik-Regular.ttf`.
    static let rubikRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Regular", pathExtension: "ttf")
    /// Resource file `model_Germany.tflite`.
    static let model_GermanyTflite = Rswift.FileResource(bundle: R.hostingBundle, name: "model_Germany", pathExtension: "tflite")
    /// Resource file `model_USA.tflite`.
    static let model_USATflite = Rswift.FileResource(bundle: R.hostingBundle, name: "model_USA", pathExtension: "tflite")
    /// Resource file `onboardSubscriptionVideo.mp4`.
    static let onboardSubscriptionVideoMp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "onboardSubscriptionVideo", pathExtension: "mp4")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-Bold", withExtension: "ttf")`
    static func rubikBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-Medium", withExtension: "ttf")`
    static func rubikMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-Regular", withExtension: "ttf")`
    static func rubikRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "model_Germany", withExtension: "tflite")`
    static func model_GermanyTflite(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.model_GermanyTflite
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "model_USA", withExtension: "tflite")`
    static func model_USATflite(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.model_USATflite
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "onboardSubscriptionVideo", withExtension: "mp4")`
    static func onboardSubscriptionVideoMp4(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.onboardSubscriptionVideoMp4
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `Rubik-Bold`.
    static let rubikBold = Rswift.FontResource(fontName: "Rubik-Bold")
    /// Font `Rubik-Medium`.
    static let rubikMedium = Rswift.FontResource(fontName: "Rubik-Medium")
    /// Font `Rubik-Regular`.
    static let rubikRegular = Rswift.FontResource(fontName: "Rubik-Regular")

    /// `UIFont(name: "Rubik-Bold", size: ...)`
    static func rubikBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikBold, size: size)
    }

    /// `UIFont(name: "Rubik-Medium", size: ...)`
    static func rubikMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikMedium, size: size)
    }

    /// `UIFont(name: "Rubik-Regular", size: ...)`
    static func rubikRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikRegular, size: size)
    }

    static func validate() throws {
      if R.font.rubikBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-Bold' could not be loaded, is 'Rubik-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-Medium' could not be loaded, is 'Rubik-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-Regular' could not be loaded, is 'Rubik-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 65 images.
  struct image {
    /// Image `AllButtonArrow`.
    static let allButtonArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "AllButtonArrow")
    /// Image `BoldFontIcon_border`.
    static let boldFontIcon_border = Rswift.ImageResource(bundle: R.hostingBundle, name: "BoldFontIcon_border")
    /// Image `BoldFontIcon`.
    static let boldFontIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "BoldFontIcon")
    /// Image `BoldFont_border`.
    static let boldFont_border = Rswift.ImageResource(bundle: R.hostingBundle, name: "BoldFont_border")
    /// Image `BoldItalicFont`.
    static let boldItalicFont = Rswift.ImageResource(bundle: R.hostingBundle, name: "BoldItalicFont")
    /// Image `ItalicFontIcon`.
    static let italicFontIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ItalicFontIcon")
    /// Image `MainBoldIcon`.
    static let mainBoldIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainBoldIcon")
    /// Image `addButtonImage`.
    static let addButtonImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "addButtonImage")
    /// Image `addCustomColor`.
    static let addCustomColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "addCustomColor")
    /// Image `addCustomPhoto`.
    static let addCustomPhoto = Rswift.ImageResource(bundle: R.hostingBundle, name: "addCustomPhoto")
    /// Image `allHighlightsNavBarHeader`.
    static let allHighlightsNavBarHeader = Rswift.ImageResource(bundle: R.hostingBundle, name: "allHighlightsNavBarHeader")
    /// Image `backNavBarIcon`.
    static let backNavBarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "backNavBarIcon")
    /// Image `bigTextView`.
    static let bigTextView = Rswift.ImageResource(bundle: R.hostingBundle, name: "bigTextView")
    /// Image `categoryPremiumIcon`.
    static let categoryPremiumIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "categoryPremiumIcon")
    /// Image `centerAlignmentIcon`.
    static let centerAlignmentIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "centerAlignmentIcon")
    /// Image `clearImage`.
    static let clearImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "clearImage")
    /// Image `coolEmoji`.
    static let coolEmoji = Rswift.ImageResource(bundle: R.hostingBundle, name: "coolEmoji")
    /// Image `exitIcon`.
    static let exitIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "exitIcon")
    /// Image `favoriteIcon`.
    static let favoriteIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "favoriteIcon")
    /// Image `firstOnboardFirstScreenBg`.
    static let firstOnboardFirstScreenBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "firstOnboardFirstScreenBg")
    /// Image `firstOnboardSecondScreenBg`.
    static let firstOnboardSecondScreenBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "firstOnboardSecondScreenBg")
    /// Image `firstOnboardThirdScreenBg`.
    static let firstOnboardThirdScreenBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "firstOnboardThirdScreenBg")
    /// Image `heartDeselectIcon`.
    static let heartDeselectIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "heartDeselectIcon")
    /// Image `heartSelectIcon`.
    static let heartSelectIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "heartSelectIcon")
    /// Image `infoNavBarItem`.
    static let infoNavBarItem = Rswift.ImageResource(bundle: R.hostingBundle, name: "infoNavBarItem")
    /// Image `instagramPreviewIcon`.
    static let instagramPreviewIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "instagramPreviewIcon")
    /// Image `leftAlignmentIcon`.
    static let leftAlignmentIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "leftAlignmentIcon")
    /// Image `lineTemplate10`.
    static let lineTemplate10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lineTemplate10")
    /// Image `lineTemplate11`.
    static let lineTemplate11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lineTemplate11")
    /// Image `lineTemplate12`.
    static let lineTemplate12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lineTemplate12")
    /// Image `lineTemplate1`.
    static let lineTemplate1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lineTemplate1")
    /// Image `lineTemplate2`.
    static let lineTemplate2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lineTemplate2")
    /// Image `lineTemplate3`.
    static let lineTemplate3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lineTemplate3")
    /// Image `lineTemplate4`.
    static let lineTemplate4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lineTemplate4")
    /// Image `lineTemplate5`.
    static let lineTemplate5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lineTemplate5")
    /// Image `lineTemplate6`.
    static let lineTemplate6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lineTemplate6")
    /// Image `lineTemplate7`.
    static let lineTemplate7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lineTemplate7")
    /// Image `lineTemplate8`.
    static let lineTemplate8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lineTemplate8")
    /// Image `lineTemplate9`.
    static let lineTemplate9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lineTemplate9")
    /// Image `menuNavBarItem`.
    static let menuNavBarItem = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuNavBarItem")
    /// Image `previewInInstagramFor8Plus`.
    static let previewInInstagramFor8Plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "previewInInstagramFor8Plus")
    /// Image `previewInInstagramFor8`.
    static let previewInInstagramFor8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "previewInInstagramFor8")
    /// Image `previewInInstagramForX`.
    static let previewInInstagramForX = Rswift.ImageResource(bundle: R.hostingBundle, name: "previewInInstagramForX")
    /// Image `redoNavBarIcon`.
    static let redoNavBarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "redoNavBarIcon")
    /// Image `returnNavBarItem`.
    static let returnNavBarItem = Rswift.ImageResource(bundle: R.hostingBundle, name: "returnNavBarItem")
    /// Image `rightAlignmentIcon`.
    static let rightAlignmentIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "rightAlignmentIcon")
    /// Image `saveNavBarIcon`.
    static let saveNavBarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "saveNavBarIcon")
    /// Image `seeNavBarIcon`.
    static let seeNavBarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "seeNavBarIcon")
    /// Image `selectedAddImageIcon`.
    static let selectedAddImageIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedAddImageIcon")
    /// Image `selectedChangeColorIcon`.
    static let selectedChangeColorIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedChangeColorIcon")
    /// Image `selectedChangeTextureIcon`.
    static let selectedChangeTextureIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedChangeTextureIcon")
    /// Image `selectedTextEditIcon`.
    static let selectedTextEditIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedTextEditIcon")
    /// Image `shareNavBarItem`.
    static let shareNavBarItem = Rswift.ImageResource(bundle: R.hostingBundle, name: "shareNavBarItem")
    /// Image `smallTextView`.
    static let smallTextView = Rswift.ImageResource(bundle: R.hostingBundle, name: "smallTextView")
    /// Image `starDeselectIcon`.
    static let starDeselectIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "starDeselectIcon")
    /// Image `starSelectIcon`.
    static let starSelectIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "starSelectIcon")
    /// Image `textColorCircle`.
    static let textColorCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "textColorCircle")
    /// Image `thumbForAlphaSlider`.
    static let thumbForAlphaSlider = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumbForAlphaSlider")
    /// Image `undoNavBarIcon`.
    static let undoNavBarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "undoNavBarIcon")
    /// Image `unselectedAddImageIcon`.
    static let unselectedAddImageIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselectedAddImageIcon")
    /// Image `unselectedChangeColorIcon`.
    static let unselectedChangeColorIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselectedChangeColorIcon")
    /// Image `unselectedChangeTextureIcon`.
    static let unselectedChangeTextureIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselectedChangeTextureIcon")
    /// Image `unselectedEdirTextIcon`.
    static let unselectedEdirTextIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselectedEdirTextIcon")
    /// Image `upsetEmoji`.
    static let upsetEmoji = Rswift.ImageResource(bundle: R.hostingBundle, name: "upsetEmoji")
    /// Image `usualPreviewIcon`.
    static let usualPreviewIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "usualPreviewIcon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AllButtonArrow", bundle: ..., traitCollection: ...)`
    static func allButtonArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.allButtonArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BoldFontIcon", bundle: ..., traitCollection: ...)`
    static func boldFontIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boldFontIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BoldFontIcon_border", bundle: ..., traitCollection: ...)`
    static func boldFontIcon_border(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boldFontIcon_border, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BoldFont_border", bundle: ..., traitCollection: ...)`
    static func boldFont_border(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boldFont_border, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BoldItalicFont", bundle: ..., traitCollection: ...)`
    static func boldItalicFont(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boldItalicFont, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ItalicFontIcon", bundle: ..., traitCollection: ...)`
    static func italicFontIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.italicFontIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MainBoldIcon", bundle: ..., traitCollection: ...)`
    static func mainBoldIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mainBoldIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addButtonImage", bundle: ..., traitCollection: ...)`
    static func addButtonImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addButtonImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addCustomColor", bundle: ..., traitCollection: ...)`
    static func addCustomColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addCustomColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addCustomPhoto", bundle: ..., traitCollection: ...)`
    static func addCustomPhoto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addCustomPhoto, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "allHighlightsNavBarHeader", bundle: ..., traitCollection: ...)`
    static func allHighlightsNavBarHeader(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.allHighlightsNavBarHeader, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backNavBarIcon", bundle: ..., traitCollection: ...)`
    static func backNavBarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backNavBarIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bigTextView", bundle: ..., traitCollection: ...)`
    static func bigTextView(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bigTextView, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "categoryPremiumIcon", bundle: ..., traitCollection: ...)`
    static func categoryPremiumIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.categoryPremiumIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "centerAlignmentIcon", bundle: ..., traitCollection: ...)`
    static func centerAlignmentIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.centerAlignmentIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clearImage", bundle: ..., traitCollection: ...)`
    static func clearImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clearImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coolEmoji", bundle: ..., traitCollection: ...)`
    static func coolEmoji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coolEmoji, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "exitIcon", bundle: ..., traitCollection: ...)`
    static func exitIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exitIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favoriteIcon", bundle: ..., traitCollection: ...)`
    static func favoriteIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favoriteIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "firstOnboardFirstScreenBg", bundle: ..., traitCollection: ...)`
    static func firstOnboardFirstScreenBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.firstOnboardFirstScreenBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "firstOnboardSecondScreenBg", bundle: ..., traitCollection: ...)`
    static func firstOnboardSecondScreenBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.firstOnboardSecondScreenBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "firstOnboardThirdScreenBg", bundle: ..., traitCollection: ...)`
    static func firstOnboardThirdScreenBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.firstOnboardThirdScreenBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heartDeselectIcon", bundle: ..., traitCollection: ...)`
    static func heartDeselectIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heartDeselectIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heartSelectIcon", bundle: ..., traitCollection: ...)`
    static func heartSelectIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heartSelectIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "infoNavBarItem", bundle: ..., traitCollection: ...)`
    static func infoNavBarItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.infoNavBarItem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "instagramPreviewIcon", bundle: ..., traitCollection: ...)`
    static func instagramPreviewIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.instagramPreviewIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "leftAlignmentIcon", bundle: ..., traitCollection: ...)`
    static func leftAlignmentIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leftAlignmentIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lineTemplate1", bundle: ..., traitCollection: ...)`
    static func lineTemplate1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineTemplate1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lineTemplate10", bundle: ..., traitCollection: ...)`
    static func lineTemplate10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineTemplate10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lineTemplate11", bundle: ..., traitCollection: ...)`
    static func lineTemplate11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineTemplate11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lineTemplate12", bundle: ..., traitCollection: ...)`
    static func lineTemplate12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineTemplate12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lineTemplate2", bundle: ..., traitCollection: ...)`
    static func lineTemplate2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineTemplate2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lineTemplate3", bundle: ..., traitCollection: ...)`
    static func lineTemplate3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineTemplate3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lineTemplate4", bundle: ..., traitCollection: ...)`
    static func lineTemplate4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineTemplate4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lineTemplate5", bundle: ..., traitCollection: ...)`
    static func lineTemplate5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineTemplate5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lineTemplate6", bundle: ..., traitCollection: ...)`
    static func lineTemplate6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineTemplate6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lineTemplate7", bundle: ..., traitCollection: ...)`
    static func lineTemplate7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineTemplate7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lineTemplate8", bundle: ..., traitCollection: ...)`
    static func lineTemplate8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineTemplate8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lineTemplate9", bundle: ..., traitCollection: ...)`
    static func lineTemplate9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineTemplate9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menuNavBarItem", bundle: ..., traitCollection: ...)`
    static func menuNavBarItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuNavBarItem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "previewInInstagramFor8", bundle: ..., traitCollection: ...)`
    static func previewInInstagramFor8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.previewInInstagramFor8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "previewInInstagramFor8Plus", bundle: ..., traitCollection: ...)`
    static func previewInInstagramFor8Plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.previewInInstagramFor8Plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "previewInInstagramForX", bundle: ..., traitCollection: ...)`
    static func previewInInstagramForX(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.previewInInstagramForX, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "redoNavBarIcon", bundle: ..., traitCollection: ...)`
    static func redoNavBarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.redoNavBarIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "returnNavBarItem", bundle: ..., traitCollection: ...)`
    static func returnNavBarItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.returnNavBarItem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rightAlignmentIcon", bundle: ..., traitCollection: ...)`
    static func rightAlignmentIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightAlignmentIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "saveNavBarIcon", bundle: ..., traitCollection: ...)`
    static func saveNavBarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.saveNavBarIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "seeNavBarIcon", bundle: ..., traitCollection: ...)`
    static func seeNavBarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.seeNavBarIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedAddImageIcon", bundle: ..., traitCollection: ...)`
    static func selectedAddImageIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedAddImageIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedChangeColorIcon", bundle: ..., traitCollection: ...)`
    static func selectedChangeColorIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedChangeColorIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedChangeTextureIcon", bundle: ..., traitCollection: ...)`
    static func selectedChangeTextureIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedChangeTextureIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedTextEditIcon", bundle: ..., traitCollection: ...)`
    static func selectedTextEditIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedTextEditIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shareNavBarItem", bundle: ..., traitCollection: ...)`
    static func shareNavBarItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shareNavBarItem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smallTextView", bundle: ..., traitCollection: ...)`
    static func smallTextView(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smallTextView, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "starDeselectIcon", bundle: ..., traitCollection: ...)`
    static func starDeselectIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starDeselectIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "starSelectIcon", bundle: ..., traitCollection: ...)`
    static func starSelectIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starSelectIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "textColorCircle", bundle: ..., traitCollection: ...)`
    static func textColorCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.textColorCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thumbForAlphaSlider", bundle: ..., traitCollection: ...)`
    static func thumbForAlphaSlider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbForAlphaSlider, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "undoNavBarIcon", bundle: ..., traitCollection: ...)`
    static func undoNavBarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.undoNavBarIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unselectedAddImageIcon", bundle: ..., traitCollection: ...)`
    static func unselectedAddImageIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselectedAddImageIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unselectedChangeColorIcon", bundle: ..., traitCollection: ...)`
    static func unselectedChangeColorIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselectedChangeColorIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unselectedChangeTextureIcon", bundle: ..., traitCollection: ...)`
    static func unselectedChangeTextureIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselectedChangeTextureIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unselectedEdirTextIcon", bundle: ..., traitCollection: ...)`
    static func unselectedEdirTextIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselectedEdirTextIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "upsetEmoji", bundle: ..., traitCollection: ...)`
    static func upsetEmoji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upsetEmoji, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "usualPreviewIcon", bundle: ..., traitCollection: ...)`
    static func usualPreviewIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.usualPreviewIcon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 17 localization keys.
    struct localizable {
      /// en translation: 20+ categories
      ///
      /// Locales: en, ru
      static let firstOnboardSecondScreenMainText = Rswift.StringResource(key: "firstOnboardSecondScreenMainText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Are you sure you want to go back?
      ///
      /// Locales: en, ru
      static let warningEditHighlightAlertTitleText = Rswift.StringResource(key: "warningEditHighlightAlertTitleText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, ru
      static let warningEditHighlightAlertLeftButton = Rswift.StringResource(key: "warningEditHighlightAlertLeftButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Best Highlights
      ///
      /// Locales: en, ru
      static let firstOnboardFirstScreenMainText = Rswift.StringResource(key: "firstOnboardFirstScreenMainText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Constructor
      ///
      /// Locales: en, ru
      static let firstOnboardThirdScreenMainText = Rswift.StringResource(key: "firstOnboardThirdScreenMainText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en, ru
      static let continueButton = Rswift.StringResource(key: "continueButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en, ru
      static let warningEditHighlightAlertRightButton = Rswift.StringResource(key: "warningEditHighlightAlertRightButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Easy to create highlights with your own design
      ///
      /// Locales: en, ru
      static let firstOnboardThirdScreenDescriptionText = Rswift.StringResource(key: "firstOnboardThirdScreenDescriptionText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en, ru
      static let editButton = Rswift.StringResource(key: "editButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Get full access to all highlight covers. 3 day trial, then  $19.75/month. Unlock everything!
      ///
      /// Locales: en, ru
      static let firstOnboardFourthScreenDescriptionText = Rswift.StringResource(key: "firstOnboardFourthScreenDescriptionText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Hello
      ///
      /// Locales: en, ru
      static let homeScreenTitle = Rswift.StringResource(key: "homeScreenTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Highlight saved in your gallery
      ///
      /// Locales: en, ru
      static let confirmationEditHighlightAlertTitleText = Rswift.StringResource(key: "confirmationEditHighlightAlertTitleText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Make Unique Profile
      ///
      /// Locales: en, ru
      static let firstOnboardFourthScreenMainText = Rswift.StringResource(key: "firstOnboardFourthScreenMainText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Okay
      ///
      /// Locales: en, ru
      static let confirmationEditHighlightAlertButtonText = Rswift.StringResource(key: "confirmationEditHighlightAlertButtonText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Over 400 unique highlights for your Instagram profile
      ///
      /// Locales: en, ru
      static let firstOnboardFirstScreenDescriptionText = Rswift.StringResource(key: "firstOnboardFirstScreenDescriptionText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Select and edit highlights you like
      ///
      /// Locales: en, ru
      static let firstOnboardSecondScreenDescriptionText = Rswift.StringResource(key: "firstOnboardSecondScreenDescriptionText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: The created highlight will not be saved
      ///
      /// Locales: en, ru
      static let warningEditHighlightAlertDescriptionText = Rswift.StringResource(key: "warningEditHighlightAlertDescriptionText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)

      /// en translation: 20+ categories
      ///
      /// Locales: en, ru
      static func firstOnboardSecondScreenMainText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstOnboardSecondScreenMainText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "firstOnboardSecondScreenMainText"
        }

        return NSLocalizedString("firstOnboardSecondScreenMainText", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to go back?
      ///
      /// Locales: en, ru
      static func warningEditHighlightAlertTitleText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("warningEditHighlightAlertTitleText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "warningEditHighlightAlertTitleText"
        }

        return NSLocalizedString("warningEditHighlightAlertTitleText", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, ru
      static func warningEditHighlightAlertLeftButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("warningEditHighlightAlertLeftButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "warningEditHighlightAlertLeftButton"
        }

        return NSLocalizedString("warningEditHighlightAlertLeftButton", bundle: bundle, comment: "")
      }

      /// en translation: Best Highlights
      ///
      /// Locales: en, ru
      static func firstOnboardFirstScreenMainText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstOnboardFirstScreenMainText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "firstOnboardFirstScreenMainText"
        }

        return NSLocalizedString("firstOnboardFirstScreenMainText", bundle: bundle, comment: "")
      }

      /// en translation: Constructor
      ///
      /// Locales: en, ru
      static func firstOnboardThirdScreenMainText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstOnboardThirdScreenMainText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "firstOnboardThirdScreenMainText"
        }

        return NSLocalizedString("firstOnboardThirdScreenMainText", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en, ru
      static func continueButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("continueButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "continueButton"
        }

        return NSLocalizedString("continueButton", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en, ru
      static func warningEditHighlightAlertRightButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("warningEditHighlightAlertRightButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "warningEditHighlightAlertRightButton"
        }

        return NSLocalizedString("warningEditHighlightAlertRightButton", bundle: bundle, comment: "")
      }

      /// en translation: Easy to create highlights with your own design
      ///
      /// Locales: en, ru
      static func firstOnboardThirdScreenDescriptionText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstOnboardThirdScreenDescriptionText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "firstOnboardThirdScreenDescriptionText"
        }

        return NSLocalizedString("firstOnboardThirdScreenDescriptionText", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en, ru
      static func editButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editButton"
        }

        return NSLocalizedString("editButton", bundle: bundle, comment: "")
      }

      /// en translation: Get full access to all highlight covers. 3 day trial, then  $19.75/month. Unlock everything!
      ///
      /// Locales: en, ru
      static func firstOnboardFourthScreenDescriptionText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstOnboardFourthScreenDescriptionText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "firstOnboardFourthScreenDescriptionText"
        }

        return NSLocalizedString("firstOnboardFourthScreenDescriptionText", bundle: bundle, comment: "")
      }

      /// en translation: Hello
      ///
      /// Locales: en, ru
      static func homeScreenTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("homeScreenTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "homeScreenTitle"
        }

        return NSLocalizedString("homeScreenTitle", bundle: bundle, comment: "")
      }

      /// en translation: Highlight saved in your gallery
      ///
      /// Locales: en, ru
      static func confirmationEditHighlightAlertTitleText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmationEditHighlightAlertTitleText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmationEditHighlightAlertTitleText"
        }

        return NSLocalizedString("confirmationEditHighlightAlertTitleText", bundle: bundle, comment: "")
      }

      /// en translation: Make Unique Profile
      ///
      /// Locales: en, ru
      static func firstOnboardFourthScreenMainText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstOnboardFourthScreenMainText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "firstOnboardFourthScreenMainText"
        }

        return NSLocalizedString("firstOnboardFourthScreenMainText", bundle: bundle, comment: "")
      }

      /// en translation: Okay
      ///
      /// Locales: en, ru
      static func confirmationEditHighlightAlertButtonText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmationEditHighlightAlertButtonText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmationEditHighlightAlertButtonText"
        }

        return NSLocalizedString("confirmationEditHighlightAlertButtonText", bundle: bundle, comment: "")
      }

      /// en translation: Over 400 unique highlights for your Instagram profile
      ///
      /// Locales: en, ru
      static func firstOnboardFirstScreenDescriptionText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstOnboardFirstScreenDescriptionText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "firstOnboardFirstScreenDescriptionText"
        }

        return NSLocalizedString("firstOnboardFirstScreenDescriptionText", bundle: bundle, comment: "")
      }

      /// en translation: Select and edit highlights you like
      ///
      /// Locales: en, ru
      static func firstOnboardSecondScreenDescriptionText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstOnboardSecondScreenDescriptionText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "firstOnboardSecondScreenDescriptionText"
        }

        return NSLocalizedString("firstOnboardSecondScreenDescriptionText", bundle: bundle, comment: "")
      }

      /// en translation: The created highlight will not be saved
      ///
      /// Locales: en, ru
      static func warningEditHighlightAlertDescriptionText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("warningEditHighlightAlertDescriptionText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "warningEditHighlightAlertDescriptionText"
        }

        return NSLocalizedString("warningEditHighlightAlertDescriptionText", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
